package com.acs560.dataanalyzer.views.customer;

import com.acs560.dataanalyzer.models.Customer;
import com.vaadin.flow.data.validator.EmailValidator;

import com.acs560.dataanalyzer.services.CustomerService;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.router.Route;

public class CustomerForm extends FormLayout {

    private TextField name = new TextField("Name");
    private TextField email = new TextField("Email");

    private Button save = new Button("Save");
    private Button delete = new Button("Delete");
    private Button cancel = new Button("Cancel");

    private Binder<Customer> binder = new Binder<>(Customer.class);
    private CustomerService service;
    private Customer customer;

    public CustomerForm(CustomerService service) {
        this.service = service;

        // Bind form fields to Customer class
        binder.bindInstanceFields(this);

        // Add form components
        HorizontalLayout buttons = new HorizontalLayout(save, delete, cancel);
        add(name, email, buttons);

        // Set button actions
        save.addClickListener(e -> saveCustomer());
        delete.addClickListener(e -> deleteCustomer());
        cancel.addClickListener(e -> setCustomer(null));
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
        binder.readBean(customer);
    }

    private void saveCustomer() {
        try {
        	binder.forField(email)
            .asRequired("Email cannot be empty")
            .withValidator(new EmailValidator("Enter a valid email address"))
            .bind(Customer::getEmail, Customer::setEmail);
            binder.writeBean(customer);
            service.addCustomer(customer); // Save to the service (could be a repository)
            Notification.show("Customer saved");
        } catch (ValidationException e) {
            Notification.show("Unable to save customer");
        }
    }

    private void deleteCustomer() {
        if (customer != null) {
        	service.deleteCustomer(customer.getCustomerId());
            Notification.show("Customer deleted");
        }
    }
}

